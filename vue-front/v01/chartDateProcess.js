// import { type } from "os"

let _REGION_NAME = {
    '1': '动画',
    '3': '音乐',
    '4': '游戏',
    '5': '娱乐',
    '11': '电视剧',
    '13': '番剧',
    '23': '电影',
    '36': '科技',
    '119': '鬼畜',
    '129': '舞蹈',
    '155': '时尚',
    '160': '生活',
    '165': '广告',
    '167': '国创',
    '177': '放映厅',
    '181': '影视',
    '188': '数码',
    // 'all': '总数',
}

function makeOnlineDataset(rawdata) {
    let head = ['time', 'webOnline', 'playOnline']
    let dataset = []
    dataset.push(head)
    for (var i = 0, len = rawdata.length; i < len; i++) {
        var p = new Array()
        p[0] = rawdata[i].time * 1000
        p[1] = rawdata[i].d_web_online
        p[2] = rawdata[i].d_play_online
        dataset.push(p)
    }
    return dataset
}

function makeCountDataset(rawdata) {
    let dataset = []
    // 构建第一行表头
    let head = ['time', 'all']
    for (var i in _REGION_NAME) {
        // head.push(_REGION_NAME[i])
        head.push(i)
    }
    dataset.push(head)
    for (var i = 0, lenRaw = rawdata.length; i < lenRaw; i++) {
        let line = []
        line.push(rawdata[i].time * 1000)
        line.push(rawdata[i].d_all_count)
        let temp = JSON.parse(rawdata[i].d_region_count)

        // k=2 跳过 time 和 all
        for (var k = 2, lenHead = head.length; k < lenHead; k++) {
            line.push(temp[head[k]])
        }
        dataset.push(line)
    }
    return dataset
}

// 做series
function makeCountSeries() {
    // 做一个需要数据的字段列表
    let l = ['all']
    for (var i in _REGION_NAME) {
        l.push(i)
    }
    // 
    let s = []
    l.forEach((item, idx) => {
        // console.log(item)
        s.push(
            {
                // all在表里面没有对应
                name: _REGION_NAME[item] || '总数',
                type: 'line',
                encode: {
                    x: 'time',
                    y: item,
                }
            }
        )
    })
    return s
}

let makeActivitySeries = makeCountSeries
// 生成饼图需要的数据，使用做好的count的dataset
// 生成[{name:'xxx',value:'yyy'},{}]
function makePieData(dataset, idx) {
    let head = dataset[0]
    //第一行是表头，+1跳过
    let line = dataset[idx + 1]
    // console.log(head)
    let d = []
    for (var i = 2, len = head.length; i < len; i++) {
        let o = {
            name: _REGION_NAME[head[i]],
            value: line[i]
        }
        d.push(o)
    }
    // console.log(line)
    let time = tsToDateStr(line[0])
    return { time: time, data: d }
}

// 防止更新饼图频率过高，使用一个简化的debounce
function debounce(fn, delay) {
    let timer = null;

    return function () {
        let args = arguments;
        let context = this;

        if (timer) {
            clearTimeout(timer);

            timer = setTimeout(function () {
                fn.apply(context, args);
            }, delay);
        } else {
            timer = setTimeout(function () {
                fn.apply(context, args);
            }, delay);
        }
    }
}

function date2str(x, y) {
    let z = { y: x.getFullYear(), M: x.getMonth() + 1, d: x.getDate(), h: x.getHours(), m: x.getMinutes(), s: x.getSeconds() };
    return y.replace(/(y+|M+|d+|h+|m+|s+)/g, function (v) {
        return ((v.length > 1 ? "0" : "") + eval('z.' + v.slice(-1))).slice(-(v.length > 2 ? v.length : 2))
    });
}

function tsToDateStr(ts) {
    let ct = new Date(ts)
    let datestr = 'yyyy-MM-dd hh:mm:ss'
    let str = date2str(ct, datestr)
    return str.replace('00:00:00', '')
}



// ----------处理活跃度用的function---------
// 活跃度原始数据结构：{data:[{d_json:'**json_str**',time:**ts**},{}]}
// **jsonstr** 内容：当前时间的活跃数


//---------------demo_data----------------
demodataContinuous = [
    {
        "d_json": "{\"1\": 242546238, \"3\": 158726824, \"4\": 567867653, \"5\": 117899986, \"11\": 51687359, \"13\": 136545665, \"23\": 21005464, \"36\": 155145372, \"119\": 67353171, \"129\": 41785389, \"155\": 75621302, \"160\": 529719699, \"165\": 2112880, \"167\": 52306920, \"177\": 11371794, \"181\": 170815736, \"188\": 8456029}",
        "rawtime": 1568544782,
        "time": 1568544782
    },
    {
        "d_json": "{\"1\": 242546642, \"3\": 158727202, \"4\": 567868482, \"5\": 117900292, \"11\": 51687367, \"13\": 136545825, \"23\": 21005466, \"36\": 155145733, \"119\": 67353273, \"129\": 41785467, \"155\": 75621444, \"160\": 529720826, \"165\": 2112883, \"167\": 52307012, \"177\": 11371825, \"181\": 170816181, \"188\": 8456081}",
        "rawtime": 1568544857,
        "time": 1568544857
    },
    {
        "d_json": "{\"1\": 242546953, \"3\": 158727454, \"4\": 567869022, \"5\": 117900498, \"11\": 51687374, \"13\": 136545924, \"23\": 21005467, \"36\": 155145962, \"119\": 67353350, \"129\": 41785513, \"155\": 75621529, \"160\": 529721555, \"165\": 2112886, \"167\": 52307068, \"177\": 11371852, \"181\": 170816445, \"188\": 8456104}",
        "rawtime": 1568544907,
        "time": 1568544907
    },
    {
        "d_json": "{\"1\": 242547788, \"3\": 158728188, \"4\": 567870549, \"5\": 117901107, \"11\": 51687397, \"13\": 136546230, \"23\": 21005474, \"36\": 155146622, \"119\": 67353535, \"129\": 41785679, \"155\": 75621809, \"160\": 529723600, \"165\": 2112892, \"167\": 52307209, \"177\": 11371915, \"181\": 170817226, \"188\": 8456177}",
        "rawtime": 1568545047,
        "time": 1568545047
    },
    {
        "d_json": "{\"1\": 242548912, \"3\": 158729205, \"4\": 567872665, \"5\": 117901978, \"11\": 51687423, \"13\": 136546685, \"23\": 21005485, \"36\": 155147526, \"119\": 67353776, \"129\": 41785925, \"155\": 75622191, \"160\": 529726580, \"165\": 2112900, \"167\": 52307393, \"177\": 11372009, \"181\": 170818365, \"188\": 8456296}",
        "rawtime": 1568545243,
        "time": 1568545243
    },
    {
        "d_json": "{\"1\": 243031330, \"3\": 159206966, \"4\": 568744355, \"5\": 118256755, \"11\": 51696778, \"13\": 136696163, \"23\": 21009368, \"36\": 155624901, \"119\": 67473465, \"129\": 41895011, \"155\": 75803201, \"160\": 531165454, \"165\": 2115692, \"167\": 52371232, \"177\": 11409337, \"181\": 171316584, \"188\": 8515271}",
        "rawtime": 1568654050,
        "time": 1568654050
    },
    {
        "d_json": "{\"1\": 243116675, \"3\": 159298109, \"4\": 568898303, \"5\": 118311394, \"11\": 51697655, \"13\": 136715671, \"23\": 21009671, \"36\": 155713297, \"119\": 67493497, \"129\": 41913861, \"155\": 75836022, \"160\": 531416493, \"165\": 2116065, \"167\": 52378078, \"177\": 11414573, \"181\": 171394788, \"188\": 8525731}",
        "rawtime": 1568692297,
        "time": 1568692297
    },
    {
        "d_json": "{\"1\": 243141909, \"3\": 159321133, \"4\": 568947278, \"5\": 118326711, \"11\": 51697995, \"13\": 136722723, \"23\": 21009780, \"36\": 155735645, \"119\": 67500079, \"129\": 41918602, \"155\": 75844139, \"160\": 531493143, \"165\": 2116170, \"167\": 52380812, \"177\": 11416359, \"181\": 171417609, \"188\": 8528497}",
        "rawtime": 1568696853,
        "time": 1568696853
    },
    {
        "d_json": "{\"1\": 243142473, \"3\": 159321665, \"4\": 568948391, \"5\": 118327119, \"11\": 51698005, \"13\": 136722878, \"23\": 21009784, \"36\": 155736126, \"119\": 67500244, \"129\": 41918699, \"155\": 75844325, \"160\": 531494859, \"165\": 2116172, \"167\": 52380877, \"177\": 11416402, \"181\": 171418112, \"188\": 8528566}",
        "rawtime": 1568696952,
        "time": 1568696952
    },
    {
        "d_json": "{\"1\": 243379801, \"3\": 159570355, \"4\": 569362524, \"5\": 118498062, \"11\": 51702591, \"13\": 136796281, \"23\": 21011650, \"36\": 155981879, \"119\": 67561947, \"129\": 41974324, \"155\": 75935351, \"160\": 532268643, \"165\": 2117680, \"167\": 52409401, \"177\": 11435250, \"181\": 171665462, \"188\": 8557359}",
        "rawtime": 1568740481,
        "time": 1568740481
    },
    {
        "d_json": "{\"1\": 255193496, \"3\": 170780135, \"4\": 589902329, \"5\": 126413995, \"11\": 51902638, \"13\": 140690814, \"23\": 21103835, \"36\": 166339591, \"119\": 70183945, \"129\": 44559635, \"155\": 80218051, \"160\": 565824597, \"165\": 2184680, \"167\": 53962367, \"177\": 12263385, \"181\": 182509659, \"188\": 10014572}",
        "rawtime": 1571305011,
        "time": 1571305011
    },
    {
        "d_json": "{\"1\": 255194424, \"3\": 170780871, \"4\": 589903960, \"5\": 126414458, \"11\": 51902647, \"13\": 140691043, \"23\": 21103843, \"36\": 166340408, \"119\": 70184148, \"129\": 44559785, \"155\": 80218363, \"160\": 565827325, \"165\": 2184684, \"167\": 53962445, \"177\": 12263442, \"181\": 182510410, \"188\": 10014662}",
        "rawtime": 1571305158,
        "time": 1571305158
    }
]

let demodataByday = [
    {
        "d_json": "{\"1\": 242548912, \"3\": 158729205, \"4\": 567872665, \"5\": 117901978, \"11\": 51687423, \"13\": 136546685, \"23\": 21005485, \"36\": 155147526, \"119\": 67353776, \"129\": 41785925, \"155\": 75622191, \"160\": 529726580, \"165\": 2112900, \"167\": 52307393, \"177\": 11372009, \"181\": 170818365, \"188\": 8456296}",
        "rawtime": 1568545243,
        "time": 1568476800
    },
    {
        "d_json": "{\"1\": 243142473, \"3\": 159321665, \"4\": 568948391, \"5\": 118327119, \"11\": 51698005, \"13\": 136722878, \"23\": 21009784, \"36\": 155736126, \"119\": 67500244, \"129\": 41918699, \"155\": 75844325, \"160\": 531494859, \"165\": 2116172, \"167\": 52380877, \"177\": 11416402, \"181\": 171418112, \"188\": 8528566}",
        "rawtime": 1568696952,
        "time": 1568649600
    },
    {
        "d_json": "{\"1\": 243379801, \"3\": 159570355, \"4\": 569362524, \"5\": 118498062, \"11\": 51702591, \"13\": 136796281, \"23\": 21011650, \"36\": 155981879, \"119\": 67561947, \"129\": 41974324, \"155\": 75935351, \"160\": 532268643, \"165\": 2117680, \"167\": 52409401, \"177\": 11435250, \"181\": 171665462, \"188\": 8557359}",
        "rawtime": 1568740481,
        "time": 1568736000
    },
    {
        "d_json": "{\"1\": 255194424, \"3\": 170780871, \"4\": 589903960, \"5\": 126414458, \"11\": 51902647, \"13\": 140691043, \"23\": 21103843, \"36\": 166340408, \"119\": 70184148, \"129\": 44559785, \"155\": 80218363, \"160\": 565827325, \"165\": 2184684, \"167\": 53962445, \"177\": 12263442, \"181\": 182510410, \"188\": 10014662}",
        "rawtime": 1571305158,
        "time": 1571241600
    }
]
//
function makeActivityDataset(rawdata) {
    if (rawdata.length < 2) {
        return []
    }

    rawdata.forEach((item, idx) => {
        item.d = JSON.parse(item.d_json)
    })
    let head = []
    let row = rawdata[0].d
    for (x in row) {
        head.push(x)
    }
    let dataset = []

    // 因为本行数据计算的是与前一行数据相减得到的平均数，所以首行数据无法直接计算
    // 提前装入最顶上一行的时间,最顶上一行的数据等计算完成后，复制下面一行过去
    dataset.push([rawdata[0].time * 1000])

    // 从下标1开始循环
    for (var i = 1, lenRaw = rawdata.length; i < lenRaw; i++) {
        console.log(rawdata[i], i)
        let deltaTime = rawdata[i]['rawtime'] - rawdata[i - 1]['rawtime']
        let row = []
        // 做一个汇总
        let all = 0
        for (var j = 0, lenHead = head.length; j < lenHead; j++) {
            let columnName = head[j]
            let dv = rawdata[i].d[columnName] - rawdata[i - 1].d[columnName]
            // 计算平均每小时的变化，标准时间戳不包含毫秒
            let result = dv / deltaTime * 3600
            // 保留两位小数
            result = Math.round(result * 100) / 100;
            row.push(result)
            all += result
        }

        // 每行的第一个元素是时间，第二个是总计
        row.unshift(all)
        row.unshift(rawdata[i].time * 1000)
        dataset.push(row)
    }
    // 把第1行数据复制给第0行(除时间外)
    let source = dataset[1]
    let dest = dataset[0]
    for (var i = 1, len = dataset[1].length; i < len; i++) {
        dest[i] = source[i]
    }

    // 补齐第一列名time
    head.unshift('time','all')
    // 把表头从左端压入
    dataset.unshift(head)

    console.log('-----')
    console.log(dataset)
    return dataset
}

// export {}